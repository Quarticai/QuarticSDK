:mod:`quartic_sdk.core.entities.asset`
======================================

.. py:module:: quartic_sdk.core.entities.asset

.. autoapi-nested-parse::

   The given file contains the class to refer to the asset entity



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quartic_sdk.core.entities.asset.Asset



.. class:: Asset

   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the asset entity which is created based upon the
   asset object returned from the API

   .. method:: __repr__(self)

      Override the method to return the asset name with id


   .. method:: get_tags(self)

      The given method returns the list of tags for the given asset


   .. method:: event_frames(self)
      :abstractmethod:

      The given method returns the list of event frames for the given asset


   .. method:: batches(self)

      The given method returns the list of batches for the given asset


   .. method:: data(self, start_time, stop_time, granularity=0, return_type=Constants.RETURN_PANDAS, transformations=[])

      Get the data of all tags in the asset between the given start_time and
      stop_time for the given granularity
      :param start_time: (epoch) Start_time for getting data
      :param stop_time: (epoch) Stop_time for getting data
      :param granularity: Granularity of the data
      :param return_type: The param decides whether the data after querying will be
          json(when value is "json") or pandas dataframe(when value is "pd"). By default,
          it takes the value as "json"
      :param transformations: Refers to the list of transformations. It supports either
          interpolation or aggregation, depending upon which, we pass the value of this
          dictionary. An example value here is:
          [{
              "transformation_type": "interpolation",
              "column": "3",
              "method": "linear"
          }, {
              "transformation_type": "aggregation",
              "aggregation_column": "4",
              "aggregation_dict": {"3": "max"}
          }]
      :return: (DataIterator) DataIterator object which can be iterated to get the data
          between the given duration



