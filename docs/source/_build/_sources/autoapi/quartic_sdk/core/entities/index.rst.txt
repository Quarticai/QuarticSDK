:mod:`quartic_sdk.core.entities`
================================

.. py:module:: quartic_sdk.core.entities


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   asset/index.rst
   base/index.rst
   batch/index.rst
   context_frame/index.rst
   context_frame_occurrence/index.rst
   edge_connector/index.rst
   model/index.rst
   tag/index.rst
   type_mapping/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   quartic_sdk.core.entities.Asset
   quartic_sdk.core.entities.Batch
   quartic_sdk.core.entities.ContextFrame
   quartic_sdk.core.entities.ContextFrameOccurrence
   quartic_sdk.core.entities.EdgeConnector
   quartic_sdk.core.entities.Tag
   quartic_sdk.core.entities.Model



.. class:: Asset(body_json, api_helper)


   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the asset entity which is created based upon the
   asset object returned from the API

   .. attribute:: mapping
      

      

   .. method:: __repr__(self)

      Override the method to return the asset name with id


   .. method:: get_tags(self, query_params={})

      The given method returns the list of tags for the given asset
      :param query_params: Dictionary of filter conditions


   .. method:: event_frames(self)
      :abstractmethod:

      The given method returns the list of event frames for the given asset


   .. method:: batches(self, query_params={})

      The given method returns the list of batches for the given asset
      :param query_params: Dictionary of filter conditions


   .. method:: data(self, start_time, stop_time, granularity=0, return_type=Constants.RETURN_PANDAS, batch_size=Constants.DEFAULT_PAGE_LIMIT_ROWS, transformations=[])

      Get the data of all tags in the asset between the given start_time and
      stop_time for the given granularity
      :param start_time: (epoch) Start_time for getting data
      :param stop_time: (epoch) Stop_time for getting data
      :param granularity: Granularity of the data
      :param return_type: The param decides whether the data after querying will be
          json(when value is "json") or pandas dataframe(when value is "pd"). By default,
          it takes the value as "json"
      :param transformations: Refers to the list of transformations. It supports either
          interpolation or aggregation, depending upon which, we pass the value of this
          dictionary. An example value here is:
          [{
              "transformation_type": "interpolation",
              "column": "3",
              "method": "linear"
          }, {
              "transformation_type": "aggregation",
              "aggregation_column": "4",
              "aggregation_dict": {"3": "max"}
          }]
      :return: (DataIterator) DataIterator object which can be iterated to get the data
          between the given duration


   .. method:: __getattribute__(self, name)

      This method overrides the python's object __getattribute__ method. This is used to
      map some constant value of an object to some meaningful string constants for better
      readability
      :param name: name of the object attribute we want to access for example asset.status
      :return: Either mapped value or raw value with respect to the object attribute



.. class:: Batch(body_json, api_helper)


   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the batch entity which is created based upon the batch
   object returned from the API

   .. method:: __repr__(self)

      Override the method to return the asset name with id



.. class:: ContextFrame(body_json, api_helper)


   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the context frame entity which is created based
   upon the context frame object returned from the API

   .. method:: __repr__(self)

      Override the method to return the asset name with id


   .. method:: occurrences(self, query_params={})

      Return the list of occurrences for the given context frame
      :param query_params: Dictionary of filter conditions



.. class:: ContextFrameOccurrence(body_json, api_helper)


   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the context frame occurrence entity which is created
   based upon the context frame occurrence object returned from the API

   .. method:: __repr__(self)

      Override the method to return the asset name with id



.. class:: EdgeConnector(body_json, api_helper)


   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the data source entity which is created based upon the
   data source object returned from the API

   .. attribute:: mapping
      

      

   .. method:: __repr__(self)

      Override the method to return the data source name with id


   .. method:: get_tags(self, query_params={})

      The given method returns the list of tags for the given asset
      :param query_params: Dictionary of filter conditions


   .. method:: historical_data(self, start_time, stop_time, batch_size=Constants.DEFAULT_BATCH_SIZE, max_records=None, tags=None, return_type=Constants.RETURN_PANDAS)

      Fetch historical data for the given OPCUA edge connector


   .. method:: data(self, start_time, stop_time, granularity=0, return_type=Constants.RETURN_PANDAS, batch_size=Constants.DEFAULT_PAGE_LIMIT_ROWS, transformations=[])

      Get the data of all tags in the edge connector between the given start_time and
      stop_time for the given granularity
      :param start_time: (epoch) Start_time for getting data
      :param stop_time: (epoch) Stop_time for getting data
      :param granularity: Granularity of the data
      :param return_type: The param decides whether the data after querying will be
          json(when value is "json") or pandas dataframe(when value is "pd"). By default,
          it takes the value as "json"
      :param transformations: Refers to the list of transformations. It supports either
          interpolation or aggregation, depending upon which, we pass the value of this
          dictionary. An example value here is:
          [{
              "transformation_type": "interpolation",
              "column": "3",
              "method": "linear"
          }, {
              "transformation_type": "aggregation",
              "aggregation_column": "4",
              "aggregation_dict": {"3": "max"}
          }]
      :return: (DataIterator) DataIterator object which can be iterated to get the data
          between the given duration


   .. method:: __getattribute__(self, name)

      This method overrides the python's object __getattribute__ method. This is used to
      map some constant value of an object to some meaningful string constants for better
      readability
      :param name: name of the object attribute we want to access for example edge_connector.connector_protocol
      :return: Either mapped value or raw value with respect to the object attribute



.. class:: Tag(body_json, api_helper)


   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the tag entity which is created based upon the
   tag object returned from the API

   .. attribute:: mapping
      

      

   .. method:: __repr__(self)

      Override the method to return the tag name with id


   .. method:: data(self, start_time, stop_time, granularity=0, return_type=Constants.RETURN_PANDAS, batch_size=Constants.DEFAULT_PAGE_LIMIT_ROWS, transformations=[])

      Get the data for the given tag between the start_time and the stop_time
      for the given granularity
      :param start_time: (epoch) Start_time for getting data
      :param stop_time: (epoch) Stop_time for getting data
      :param granularity: Granularity of the data
      :param return_type: The param decides whether the data after querying will be
          json(when value is "json") or pandas dataframe(when value is "pd"). By default,
          it takes the value as "json"
      :param transformations: Refers to the list of transformations. It supports either
          interpolation or aggregation, depending upon which, we pass the value of this
          dictionary. An example value here is:
          [{
              "transformation_type": "interpolation",
              "column": "3",
              "method": "linear"
          }, {
              "transformation_type": "aggregation",
              "aggregation_column": "4",
              "aggregation_dict": {"3": "max"}
          }]
      :return: (DataIterator) DataIterator object which can be iterated to get the data
          between the given duration


   .. method:: __getattribute__(self, name)

      This method overrides the python's object __getattribute__ method. This is used to
      map some constant value of an object to some meaningful string constants for better
      readability
      :param name: name of the object attribute we want to access for example tag.tag_type
      :return: Either mapped value or raw value with respect to the object attribute



.. class:: Model(body_json, api_helper)


   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the Model entity which is created based upon the
   Model object returned from the API

   .. method:: __repr__(self)

      Override the method to return the Model with model name and id


   .. method:: model_instance(self, query_params={})

      Returns the model object saved in the model
      :param query_params: Dictionary of filter conditions
      :return:    Returns a Model which is subclass of BaseQuarticModel



