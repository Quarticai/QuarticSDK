:mod:`quartic_sdk.core.iterators.tag_data_iterator`
===================================================

.. py:module:: quartic_sdk.core.iterators.tag_data_iterator


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quartic_sdk.core.iterators.tag_data_iterator.TagDataIterator



.. class:: TagDataIterator(tags, start_time, stop_time, count, api_helper, offset=0, granularity=0, return_type=Constants.RETURN_JSON, transformations=[])


   The given class is the iterator class, which will be used to iterate
   for getting the tag data values at the given intervals

   .. method:: validate_transformations_schema(transformations, tags)
      :staticmethod:

      We validate the transformations schema. Its schema would be like the following:
      [{"transformation_type": "interpolation", "column": "1", "method": "linear"},
      {"transformation_type": "aggregation", "aggregation_column": "2",
      "aggregation_dict": {"1":{"1":"max"},"2":{"2":"std"}}}]
      :param transformations: List of transformations in the schema as above
      :param tags: List of tag ids
      :return: (bool) Whether the transformation schema is valid


   .. method:: create_post_data(self)

      We create the required post data which will be used for making the POST call


   .. method:: __next__(self)

      Get the next object in the iteration


   .. method:: __getitem__(self, key)

      We override this method to get the object at the given key


   .. method:: create_tag_data_iterator(cls, tags, start_time, stop_time, api_helper, granularity=0, return_type=Constants.RETURN_PANDAS, transformations=[])
      :classmethod:

      The method creates the TagDataIterator instance based upon the parameters that are passed here
      :param start_time: (epoch) Start_time for getting data
      :param stop_time: (epoch) Stop_time for getting data
      :param granularity: Granularity of the data
      :param return_type: The param decides whether the data after querying will be
          json(when value is "json") or pandas dataframe(when value is "pd"). By default,
          it takes the value as "json"
      :param transformations: Refers to the list of transformations. It supports either
          interpolation or aggregation, depending upon which, we pass the value of this
          dictionary. An example value here is:
          [{
              "transformation_type": "interpolation",
              "column": "3",
              "method": "linear"
          }, {
              "transformation_type": "aggregation",
              "aggregation_column": "4",
              "aggregation_dict": {"3": "max"}
          }]
      :return: (DataIterator) DataIterator object which can be iterated to get the data
          between the given duration



