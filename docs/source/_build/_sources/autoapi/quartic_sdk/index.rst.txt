:mod:`quartic_sdk`
==================

.. py:module:: quartic_sdk


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   api/index.rst
   core/index.rst
   model/index.rst
   utilities/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   _version/index.rst
   api_client/index.rst
   exceptions/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   quartic_sdk.APIClient



.. class:: APIClient(host, username=None, password=None, oauth_token=None, cert_path=None, verify_ssl=True)


   .. method:: version()
      :staticmethod:

      Return the SDK version


   .. method:: assets(self, query_params={})

      Get the assets method
      :param query_params: Dictionary of filter conditions


   .. method:: context_frames(self, query_params={})

      Get the context frames method
      :param query_params: Dictionary of filter conditions
      :return: (EntityList) List of context frames


   .. method:: edge_connectors(self, query_params={})

      Get the edge connectors method
      :param query_params: Dictionary of filter conditions


   .. method:: process_units(self)
      :abstractmethod:

      Get the process units


   .. method:: work_cells(self)
      :abstractmethod:

      Get the work cells


   .. method:: tags(self, asset_id, query_params={})

      Get the tags
      :param asset_id: ID of the asset
      :param query_params: Dictionary of filter conditions
      :return: (EntityList) List of tags belonging to the asset


<<<<<<< HEAD
   .. method:: list_models(self, is_active: bool = None, ml_node: int = None) -> List[Dict]
=======
   .. method:: list_models(self, is_active: bool = None, ml_node: int = None, query_params={})
>>>>>>> 771990a... Merge pull request #97 from Quarticai/PLT-5377

      List models and its parameters accessible by user
      :param is_active: Boolean Indicator if list should contain active nodes or not
      :param ml_node:   Ml Node id to filter models deployed to particular node
      :param query_params: Dictionary of filter conditions
      :return:          list of dictionary



