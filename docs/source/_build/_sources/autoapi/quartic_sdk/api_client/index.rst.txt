:mod:`quartic_sdk.api_client`
=============================

.. py:module:: quartic_sdk.api_client


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quartic_sdk.api_client.APIClient



.. class:: APIClient(host, username=None, password=None, oauth_token=None, cert_path=None, verify_ssl=True, gql_host=None)


   .. method:: version()
      :staticmethod:

      Return the SDK version


   .. method:: assets(self, query_params={})

      Get the assets method
      :param query_params: Dictionary of filter conditions


   .. method:: context_frames(self, query_params={})

      Get the context frames method
      :param query_params: Dictionary of filter conditions
      :return: (EntityList) List of context frames


   .. method:: edge_connectors(self, query_params={})

      Get the edge connectors method
      :param query_params: Dictionary of filter conditions


   .. method:: process_units(self)
      :abstractmethod:

      Get the process units


   .. method:: work_cells(self)
      :abstractmethod:

      Get the work cells


   .. method:: tags(self, asset_id, query_params={})

      Get the tags
      :param asset_id: ID of the asset
      :param query_params: Dictionary of filter conditions
      :return: (EntityList) List of tags belonging to the asset


   .. method:: event_frames(self, query_params={})

      Get the Event Frames
      :param query_params: Dictionary of filter conditions
      :return: (EntityList) List of Event Frames belonging to the asset


   .. method:: list_models(self, is_active: bool = None, ml_node: int = None, model_type: int = Constants.MODEL_TYPE_TELEMETRY, query_params={})

      List models and its parameters accessible by user

      :param is_active: Boolean Indicator if list should contain active nodes or not
      :param ml_node:   Ml Node id to filter models deployed to particular node
      :param model_type: Ml model type. 0 - All models , 1 - Telemetry models (Default) , 2 - Spectral models
      :param query_params: Dictionary of filter conditions
      :return:          list of dictionary


   .. method:: products(self, query_params={})

      This method is used to fetch list of all product belongs to a particular client
      :param query_params: Dictionary of filter conditions
      :return: Product(Product Entity) Objects


   .. method:: sites(self, query_params={})

      This method is used to fetch all sites available for a user's client
      :param query_params: Dictionary of filter conditions
      :return: Site(Site Entity) Objects



